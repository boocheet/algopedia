{"version":3,"sources":["components/Algorithms.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["Algorithms","algorithms","showProsAndCons","CardColumns","className","map","algorithm","i","Card","key","CardImg","top","src","imageUrl","CardBody","CardTitle","href","moreDetailsUrl","name","CardSubtitle","averagePerformance","addedOn","CardText","description","pros","pro","cons","con","Header","this","props","visibleAlgorithms","console","log","Navbar","bg","variant","NavbarBrand","Nav","navbar","NavItem","length","Component","App","state","dropDownOpen","toggle","setState","select","e","displayedAlgorithms","filter","target","value","reset","hide","ButtonDropdown","Dropdown","isOpen","DropdownToggle","color","caret","DropdownMenu","DropdownItem","onClick","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2dd0d9b.chunk.js","sourcesContent":["import React from 'react'\n// import algorithms from './algorithms.json'\nimport './card.css'\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  CardColumns\n} from \"reactstrap\";\n\nconst Algorithms = ({algorithms, showProsAndCons}) => {\n  return (\n    <CardColumns  className=\" m-3 p-3\">\n    {algorithms.map( (algorithm, i) => {\n      if(!showProsAndCons){\n        return (\n      <Card key= {i}>\n       <CardImg top className=\"algo-img\" src={algorithm.imageUrl} />\n        <CardBody> \n          <CardTitle>\n          <a className=\"btn-primary\"\n            href={algorithm.moreDetailsUrl}\n          >\n            {algorithm.name}\n          </a>\n          </CardTitle>\n          <CardSubtitle>Big O Notation: {algorithm.averagePerformance}</CardSubtitle><br/>\n          <CardSubtitle>Date Added: {algorithm.addedOn}</CardSubtitle>\n          <CardText>\n            {algorithm.description}\n          </CardText>\n        </CardBody>\n      </Card>\n      )\n        \n      } else {\n        return (\n      <Card key= {i}>\n       <CardImg top className=\"algo-img\" src={algorithm.imageUrl} />\n        <CardBody> \n          <CardTitle>\n          <a className=\"btn-primary\"\n            href={algorithm.moreDetailsUrl}\n          >\n            {algorithm.name}\n          </a>\n          </CardTitle>\n          <CardSubtitle>Big O Notation: {algorithm.averagePerformance}</CardSubtitle><br/>\n          <CardSubtitle>Date Added: {algorithm.addedOn}</CardSubtitle>\n          <CardText>\n            {algorithm.description}\n          </CardText>\n          <CardText>\n            <ul>\n             <h6>Pros</h6>\n              {algorithm.pros.map((pro, i) => {\n                return (\n                  <li key={i}>{pro}</li>\n                )\n              })}\n            </ul>\n            <ul>\n             <h6>Cons</h6>\n              {algorithm.cons.map((con, i) => {\n                return (\n                  <li key={i}>{con}</li>\n                )\n              })}\n            </ul>\n          </CardText>\n        </CardBody>\n      </Card>\n      )\n      }\n    \n    })} \n  </CardColumns>\n  )\n}\n\nexport default Algorithms","import React, { Fragment, Component } from 'react';\nimport {Navbar, NavbarBrand, Nav, NavItem, } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\n class Header extends Component {\n   \n   render() {\n    const {algorithms, visibleAlgorithms} = this.props\n    console.log('header', this.props)\n    return (\n      <Fragment>\n            <Navbar  bg=\"dark\" variant=\"dark\">\n              <NavbarBrand> smart Count </NavbarBrand>\n              <Nav navbar>\n                <NavItem>\n                  Total Algorithms: {algorithms.length}\n                </NavItem>\n                <NavItem>\n                  Total Algorithms being displayed: {visibleAlgorithms.length}\n                </NavItem>\n              </Nav>\n            </Navbar>\n      </Fragment>\n    )\n  }\n}\n\nexport default Header","import React, {Fragment, Component} from 'react';\nimport { ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle, Dropdown, Button} from 'reactstrap';\nimport Algorithms from './Algorithms'\nimport Header from './Header'\nimport algorithms from './algorithms.json'\nimport './App.css';\nimport './card.css'\nimport './dropDown.css'\n\n\nclass App extends Component{\n \n  state = {\n    algorithms: algorithms, \n    visibleAlgorithms: algorithms,\n    dropDownOpen: '',\n    showProsAndCons: true\n  }\n\n  toggle = () => {\n    this.setState({\n       dropDownOpen: !this.state.dropDownOpen,\n    })\n  }\n\nselect = (e) => {\n  let displayedAlgorithms = this.state.algorithms.filter(algorithm => {\n     if(e.target.value === 'display all'){\n      return algorithm\n     }\n    return algorithm.averagePerformance === e.target.value\n  });\n \n  this.setState({visibleAlgorithms: displayedAlgorithms})\n}\n\nreset = () => {\n  this.setState({\n    algorithms: algorithms, \n    visibleAlgorithms: algorithms,\n    dropDownOpen: '',\n    showProsAndCons: true\n  })\n}\n\nhide = () => {\n  this.setState({showProsAndCons: !this.state.showProsAndCons})\n}\n  render (){\n    return (\n      <Fragment>\n      <Header algorithms={this.state.algorithms} visibleAlgorithms={this.state.visibleAlgorithms}/>\n      <ButtonDropdown >\n          <Dropdown isOpen={this.state.dropDownOpen} toggle={this.toggle} >\n              <DropdownToggle color=\"primary\" caret className=\"dropdown-toggle\">\n                  Select Which Big O Notation To View\n              </DropdownToggle>\n              <DropdownMenu className=\"bigO-dropdown\">\n                <DropdownItem onClick={this.select} value=\"O(ðŸ¥ž)\">O(ðŸ¥ž)</DropdownItem>\n                <DropdownItem onClick={this.select} value=\"O(n log n)\">O(n log n)</DropdownItem>\n                <DropdownItem onClick={this.select} value=\"O(nÂ²)\">O(nÂ²)</DropdownItem>\n                <DropdownItem onClick={this.select} value=\"display all\">Display all</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n        </ButtonDropdown>  \n        <Button onClick={this.reset} >Reset</Button>\n        <Button onClick={this.hide}> {this.state.showProsAndCons ? 'Hide' : 'Show'} the Pros And Cons</Button>\n          <Algorithms algorithms={this.state.visibleAlgorithms} showProsAndCons={this.state.showProsAndCons} />\n      </Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}